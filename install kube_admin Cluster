# We will work on 3 nodes one is Master and 2 nodes are Workers
# If you do not have a DNS setup, each node should have the following entries in the /etc/hosts file
sudo vim /etc/hosts 
# Add the names of three hosts on each node.
============================================
                           ((Kernel Step))
# Next step is to configure kernel to ensure that we have the appropriate kernel headers installed on your system (on each node)
sudo dnf install kernel-devel-$(uname -r)
# To load the necessary kernel modules required by Kubernetes, you can use the modprobe command followed by the module names (on each node)
sudo modprobe br_netfilter
sudo modprobe ip_vs
sudo modprobe ip_vs_rr
sudo modprobe ip_vs_wrr
sudo modprobe ip_vs_sh
sudo modprobe overlay
# Next, create a configuration file (as the root user on each node) to ensure these modules load at system boot
cat > /etc/modules-load.d/kubernetes.conf << EOF
br_netfilter
ip_vs
ip_vs_rr
ip_vs_wrr
ip_vs_sh
overlay
EOF
# To set specific sysctl settings (on each node) that Kubernetes relies on, you can update the systemâ€™s kernel parameters
cat > /etc/sysctl.d/kubernetes.conf << EOF
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
# By setting these sysctl parameters, you ensure that your system is properly configured to support Kubernetes
# Run the following command to apply the changes
sysctl --system
Done........
=============================================
                  ((Swap))
# To disable swap on each server in your Kubernetes cluster, you can follow these steps:
sudo swapoff -a
sed -e '/swap/s/^/#/g' -i /etc/fstab
Done........
==============================================
             ((Install Containerd))
# Add the Docker CE Repository
sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo dnf makecache
sudo dnf -y install containerd.io
cat /etc/containerd/config.toml
sudo sh -c "containerd config default > /etc/containerd/config.toml" ; cat /etc/containerd/config.toml
sudo vim /etc/containerd/config.toml 
edit >> ((SystemdCgroup = true))
sudo systemctl enable --now containerd.service
sudo systemctl reboot
sudo systemctl status containerd.service
Done.........
==============================================
            ((Set Firewall Rules))
sudo firewall-cmd --zone=public --permanent --add-port=6443/tcp
sudo firewall-cmd --zone=public --permanent --add-port=2379-2380/tcp
sudo firewall-cmd --zone=public --permanent --add-port=10250/tcp
sudo firewall-cmd --zone=public --permanent --add-port=10251/tcp
sudo firewall-cmd --zone=public --permanent --add-port=10252/tcp
sudo firewall-cmd --zone=public --permanent --add-port=10255/tcp
sudo firewall-cmd --zone=public --permanent --add-port=5473/tcp
# 6443	Kubernetes API server
# 2379-2380	etcd server client API
# 10250	Kubelet API
# 10251	kube-scheduler
# 10252	kube-controller-manager
# 10255	Read-only Kubelet API
# 5473	ClusterControlPlaneConfig API
sudo firewall-cmd --reload
Done...............
========================================================

                >>>>>>Install Kubernetes Components<<<<<<
# First, add the Kubernetes repository (as the root user) to your package manager.
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
EOF
dnf makecache; dnf install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
systemctl enable --now kubelet.service
Done...................
========================================================
# From this point onward, we will focus on the master node
sudo kubeadm config images pull
sudo kubeadm init --pod-network-cidr=10.244.0.0/16
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
=========================================================
                ((Deploy Pod Network))
kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml
curl -O https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml
sed -i 's/cidr: 192\.168\.0\.0\/16/cidr: 10.244.0.0\/16/g' custom-resources.yaml
kubectl create -f custom-resources.yaml
Done...........
==========================================================
          >>>>>Join Worker Nodes<<<<<
# on Master Node
sudo kubeadm token create --print-join-command
# on Worker Nodes
sudo kubeadm join <MASTER_IP>:<MASTER_PORT> --token <TOKEN> --discovery-token-ca-cert-hash <DISCOVERY_TOKEN_CA_CERT_HASH>
# From the CMD in Master node you will replace them with each attribute in worker node
# On master node 
kubectl get nodes
Done..................................... *_^
